# This is a basic workflow to help you get started with Actions

name: Bicep CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with: 
          fetch-depth: 0

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.acr_login_server }} # default: index.docker.io
          username: ${{ secrets.acr_service_principal }}
          password: ${{ secrets.acr_sp_password }}

      # Runs a set of commands using the runners shell
      - name: Get Current Image Version & Build New Version
        run: |

          get_version_and_build () {
            acr_name=$1
            msg=$2
            file=$3
            current_latest_json=`az acr repository show-tags --name $acr_name --repository bicep/modules/acr -o json || $null`

            if [[ -z $current_latest_json ]]
            then
              echo "This version does not yet exist in ACR. Please manually create teh image in ACR first."
            else
              echo "DEBUG: this repo $file did exist in acr"

              # we rely on semantic versioning to assume sorting will work correctly.
              current_latest=`echo $current_latest_json | jq '.[]' | tr -d '"' | sort -rV | head -1`

              # Read Semver fields
              echo $current_latest
              IFS=. read -r major minor patch <<<"$current_latest"

              if [[ "$msg" =~ ^version.* ]]; then
                major="$((major + 1))"
              elif [[ "$msg" =~ ^feat.* ]]; then
                minor="$((minor + 1))"
              else
                # Increment patch version
                patch="$((patch + 1))"
              fi

              # Re-assemble version string from Semver fields
              printf -v new_version '%d.%d.%d' "$major" "$minor" "$patch"
              echo $new_version

              mod_name=`echo $file | cut -f1 -d'.'`
              target="br:$acr_name.azurecr.io/bicep/modules/$mod_name:$new_version"

              pushd infrastructure_templates/bicep

              echo "DEBUG: file is $file"
              echo "DEBUG: target is $target"
            
              # This script will only work on existing image repos. We will test this and set to null otherwise
              # az bicep publish --file $file --target $target

              popd
            fi
          }

          # The pattern here is to expect a commit message to begin with "version" if we are bumping major and "feat" if minor
          # otherwise, we will increment patch versions
          msg="${{ github.event.head_commit.message }}"

          acr_name='tjsiacdemoacr'


          ## I would have liked this to have worked directly via the github event, but it doesn't work for some reason. 
          files=`git log --stat -n1 --oneline | grep .bicep | awk -F\| '{print $1}' | tr -d [:blank:]`

          echo "DEBUG: Files are $files"
          if [[ -z $files ]]
          then
            echo "No bicep files have been updated."
          else
            echo "DEBUG: supposedly the files exist"
            for file in $files
            do
              echo "DEBUG: working on file $file"
              az bicep install
              get_version_and_build $acr_name $msg $file
            done
          fi